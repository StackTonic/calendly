<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */

namespace StackTonic\Calendly\Rest;

use StackTonic\Calendly\Exceptions\ConfigurationException;
use StackTonic\Calendly\Exceptions\CalendlyException;
use StackTonic\Calendly\Http\Client as HttpClient;
use StackTonic\Calendly\Http\CurlClient;
use StackTonic\Calendly\Model\EventType;
use StackTonic\Calendly\Rest\Api\EventTypes;
use StackTonic\Calendly\Rest\Api\ScheduledEvents;
use StackTonic\Calendly\Rest\Api\Users;
use StackTonic\Calendly\Rest\Api\Webhooks;
use StackTonic\Calendly\VersionInfo;


class Client {
    protected $token;
    /**
     * @var string|null
     */
    protected $logLevel;
    /**
     * @var Users
     */
    private $_Users;
    private $_Events;
    /**
     * @var EventTypes
     */
    private $_EventTypes;
    private $_ScheduledEvents;
    /**
     * @var Webhooks
     */
    private $_Webhooks;

    public function __construct(
        string $token = null,
        HttpClient $httpClient = null) {
        $this->token=$token;

        if (!$this->token) {
            throw new ConfigurationException('Credentials are required to create a Client');
        }

        if ($httpClient) {
            $this->httpClient = $httpClient;
        } else {
            $this->httpClient = new CurlClient();
        }
    }


    public function request(
        string $method,
        string $uri,
        array $params = [],
        array $data = [],
        array $headers = [],
        string $username = null,
        string $password = null,
        int $timeout = null): \StackTonic\Calendly\Http\Response {
        $username = $username;
        $password = $password;

        $headers['User-Agent'] = 'calendly-php/' . VersionInfo::string() . ' (PHP ' . PHP_VERSION . ')';
        $headers['Accept-Charset'] = 'utf-8';
        $headers['Authorization'] = 'Bearer '.$this->token;
        if ($method === 'POST' && !\array_key_exists('Content-Type', $headers)) {
            $headers['Content-Type'] = 'application/x-www-form-urlencoded';
        }

        if (!\array_key_exists('Accept', $headers)) {
            $headers['Accept'] = 'application/json';
        }

        $uri = $this->buildUri($uri);

        $response = $this->getHttpClient()->request(
            $method,
            $uri,
            $params,
            $data,
            $headers,
            $username,
            $password,
            $timeout
        );
        return $response;
    }

    /**
     * Build the final request uri
     *
     * @param string $uri The original request uri
     * @return string Request uri
     */
    public function buildUri(string $uri): string {
            return $uri;
    }


    /**
     * Retrieve the HttpClient
     *
     * @return HttpClient Current HttpClient
     */
    public function getHttpClient(): HttpClient {
        return $this->httpClient;
    }

    /**
     * Set the HttpClient
     *
     * @param HttpClient $httpClient HttpClient to use
     */
    public function setHttpClient(HttpClient $httpClient): void {
        $this->httpClient = $httpClient;
    }

    /**
     * Retrieve the log level
     *
     * @return ?string Current log level
     */
    public function getLogLevel(): ?string {
        return $this->logLevel;
    }

    /**
     * Set log level to debug
     *
     * @param string $logLevel log level to use
     */
    public function setLogLevel(string $logLevel = null): void {
        $this->logLevel = $logLevel;
    }

    protected function getUsers(): Users {
        if (!$this->_Users) {
            $this->_Users = new Users($this);
        }
        return $this->_Users;
    }
    protected function contextUsers(){
        return $this->Users;
    }


    protected function getEventTypes(): EventTypes {
        if (!$this->_EventTypes) {
            $this->_EventTypes = new EventTypes($this);
        }
        return $this->_EventTypes;
    }
    protected function contextEventTypes(){
        return $this->_EventTypes;
    }
    protected function getScheduledEvents(): ScheduledEvents {
        if (!$this->_ScheduledEvents) {
            $this->_ScheduledEvents = new ScheduledEvents($this);
        }
        return $this->_ScheduledEvents;
    }
    protected function contextScheduledEvents(){
        return $this->_ScheduledEvents;
    }
    protected function getWebHooks(): Webhooks {
        if (!$this->_Webhooks) {
            $this->_Webhooks = new Webhooks($this);
        }
        return $this->_Webhooks;
    }
    protected function contextWebhooks(){
        return $this->_Webhooks;
    }

    /**
     * Magic getter to lazy load domains
     */
    public function __get(string $name) {
        $method = 'get' . \ucfirst($name);
        if (\method_exists($this, $method)) {
            return $this->$method();
        }

        throw new CalendlyException('Unknown domain ' . $name);
    }

    /**
     * Magic call to lazy load contexts
     */
    public function __call(string $name, array $arguments) {
        $method = 'context' . \ucfirst($name);
        if (\method_exists($this, $method)) {
            return \call_user_func_array([$this, $method], $arguments);
        }

        throw new CalendlyException('Unknown context ' . $name);
    }

}
